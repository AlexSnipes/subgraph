// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get harvestedAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Harvest extends ethereum.Event {
  get params(): Harvest__Params {
    return new Harvest__Params(this);
  }
}

export class Harvest__Params {
  _event: Harvest;

  constructor(event: Harvest) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get harvestedAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewRewardPeriod extends ethereum.Event {
  get params(): NewRewardPeriod__Params {
    return new NewRewardPeriod__Params(this);
  }
}

export class NewRewardPeriod__Params {
  _event: NewRewardPeriod;

  constructor(event: NewRewardPeriod) {
    this._event = event;
  }

  get numberBlocks(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get rewardPerBlock(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get reward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get harvestedAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FeeSharingSystem__userInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class FeeSharingSystem extends ethereum.SmartContract {
  static bind(address: Address): FeeSharingSystem {
    return new FeeSharingSystem("FeeSharingSystem", address);
  }

  PRECISION_FACTOR(): BigInt {
    let result = super.call(
      "PRECISION_FACTOR",
      "PRECISION_FACTOR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_PRECISION_FACTOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PRECISION_FACTOR",
      "PRECISION_FACTOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculatePendingRewards(user: Address): BigInt {
    let result = super.call(
      "calculatePendingRewards",
      "calculatePendingRewards(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_calculatePendingRewards(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculatePendingRewards",
      "calculatePendingRewards(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateSharePriceInFRAK(): BigInt {
    let result = super.call(
      "calculateSharePriceInFRAK",
      "calculateSharePriceInFRAK():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_calculateSharePriceInFRAK(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateSharePriceInFRAK",
      "calculateSharePriceInFRAK():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateSharesValueInFRAK(user: Address): BigInt {
    let result = super.call(
      "calculateSharesValueInFRAK",
      "calculateSharesValueInFRAK(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_calculateSharesValueInFRAK(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateSharesValueInFRAK",
      "calculateSharesValueInFRAK(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentRewardPerBlock(): BigInt {
    let result = super.call(
      "currentRewardPerBlock",
      "currentRewardPerBlock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentRewardPerBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentRewardPerBlock",
      "currentRewardPerBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  frakToken(): Address {
    let result = super.call("frakToken", "frakToken():(address)", []);

    return result[0].toAddress();
  }

  try_frakToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("frakToken", "frakToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lastRewardAdjustment(): BigInt {
    let result = super.call(
      "lastRewardAdjustment",
      "lastRewardAdjustment():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastRewardAdjustment(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastRewardAdjustment",
      "lastRewardAdjustment():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastRewardBlock(): BigInt {
    let result = super.call(
      "lastRewardBlock",
      "lastRewardBlock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastRewardBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastRewardBlock",
      "lastRewardBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastUpdateBlock(): BigInt {
    let result = super.call(
      "lastUpdateBlock",
      "lastUpdateBlock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastUpdateBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastUpdateBlock",
      "lastUpdateBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  periodEndBlock(): BigInt {
    let result = super.call("periodEndBlock", "periodEndBlock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_periodEndBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "periodEndBlock",
      "periodEndBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardPerTokenStored(): BigInt {
    let result = super.call(
      "rewardPerTokenStored",
      "rewardPerTokenStored():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rewardPerTokenStored(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerTokenStored",
      "rewardPerTokenStored():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalShares(): BigInt {
    let result = super.call("totalShares", "totalShares():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalShares", "totalShares():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userInfo(param0: Address): FeeSharingSystem__userInfoResult {
    let result = super.call(
      "userInfo",
      "userInfo(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new FeeSharingSystem__userInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_userInfo(
    param0: Address
  ): ethereum.CallResult<FeeSharingSystem__userInfoResult> {
    let result = super.tryCall(
      "userInfo",
      "userInfo(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FeeSharingSystem__userInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get claimRewardToken(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class HarvestCall extends ethereum.Call {
  get inputs(): HarvestCall__Inputs {
    return new HarvestCall__Inputs(this);
  }

  get outputs(): HarvestCall__Outputs {
    return new HarvestCall__Outputs(this);
  }
}

export class HarvestCall__Inputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }
}

export class HarvestCall__Outputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _frakToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateRewardsCall extends ethereum.Call {
  get inputs(): UpdateRewardsCall__Inputs {
    return new UpdateRewardsCall__Inputs(this);
  }

  get outputs(): UpdateRewardsCall__Outputs {
    return new UpdateRewardsCall__Outputs(this);
  }
}

export class UpdateRewardsCall__Inputs {
  _call: UpdateRewardsCall;

  constructor(call: UpdateRewardsCall) {
    this._call = call;
  }

  get reward(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get rewardDurationInBlocks(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateRewardsCall__Outputs {
  _call: UpdateRewardsCall;

  constructor(call: UpdateRewardsCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get claimRewardToken(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawAllCall extends ethereum.Call {
  get inputs(): WithdrawAllCall__Inputs {
    return new WithdrawAllCall__Inputs(this);
  }

  get outputs(): WithdrawAllCall__Outputs {
    return new WithdrawAllCall__Outputs(this);
  }
}

export class WithdrawAllCall__Inputs {
  _call: WithdrawAllCall;

  constructor(call: WithdrawAllCall) {
    this._call = call;
  }

  get claimRewardToken(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class WithdrawAllCall__Outputs {
  _call: WithdrawAllCall;

  constructor(call: WithdrawAllCall) {
    this._call = call;
  }
}
