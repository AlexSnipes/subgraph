// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Defraktionalized extends ethereum.Event {
  get params(): Defraktionalized__Params {
    return new Defraktionalized__Params(this);
  }
}

export class Defraktionalized__Params {
  _event: Defraktionalized;

  constructor(event: Defraktionalized) {
    this._event = event;
  }

  get holder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Fraktionalized extends ethereum.Event {
  get params(): Fraktionalized__Params {
    return new Fraktionalized__Params(this);
  }
}

export class Fraktionalized__Params {
  _event: Fraktionalized;

  constructor(event: Fraktionalized) {
    this._event = event;
  }

  get holder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get minter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ItemSold extends ethereum.Event {
  get params(): ItemSold__Params {
    return new ItemSold__Params(this);
  }
}

export class ItemSold__Params {
  _event: ItemSold;

  constructor(event: ItemSold) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get indexUsed(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LockedSharesForTransfer extends ethereum.Event {
  get params(): LockedSharesForTransfer__Params {
    return new LockedSharesForTransfer__Params(this);
  }
}

export class LockedSharesForTransfer__Params {
  _event: LockedSharesForTransfer;

  constructor(event: LockedSharesForTransfer) {
    this._event = event;
  }

  get shareOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get numShares(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MajorityValueChanged extends ethereum.Event {
  get params(): MajorityValueChanged__Params {
    return new MajorityValueChanged__Params(this);
  }
}

export class MajorityValueChanged__Params {
  _event: MajorityValueChanged;

  constructor(event: MajorityValueChanged) {
    this._event = event;
  }

  get newValue(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class NewRevenueAdded extends ethereum.Event {
  get params(): NewRevenueAdded__Params {
    return new NewRevenueAdded__Params(this);
  }
}

export class NewRevenueAdded__Params {
  _event: NewRevenueAdded;

  constructor(event: NewRevenueAdded) {
    this._event = event;
  }

  get payer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get revenueChannel(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sold(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class unLockedSharesForTransfer extends ethereum.Event {
  get params(): unLockedSharesForTransfer__Params {
    return new unLockedSharesForTransfer__Params(this);
  }
}

export class unLockedSharesForTransfer__Params {
  _event: unLockedSharesForTransfer;

  constructor(event: unLockedSharesForTransfer) {
    this._event = event;
  }

  get shareOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get numShares(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FraktalNFT extends ethereum.SmartContract {
  static bind(address: Address): FraktalNFT {
    return new FraktalNFT("FraktalNFT", address);
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  fraktionsIndex(): BigInt {
    let result = super.call("fraktionsIndex", "fraktionsIndex():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fraktionsIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fraktionsIndex",
      "fraktionsIndex():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFraktions(who: Address): BigInt {
    let result = super.call("getFraktions", "getFraktions(address):(uint256)", [
      ethereum.Value.fromAddress(who)
    ]);

    return result[0].toBigInt();
  }

  try_getFraktions(who: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFraktions",
      "getFraktions(address):(uint256)",
      [ethereum.Value.fromAddress(who)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFraktionsIndex(): BigInt {
    let result = super.call(
      "getFraktionsIndex",
      "getFraktionsIndex():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getFraktionsIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFraktionsIndex",
      "getFraktionsIndex():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLockedShares(index: BigInt, who: Address): BigInt {
    let result = super.call(
      "getLockedShares",
      "getLockedShares(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(index),
        ethereum.Value.fromAddress(who)
      ]
    );

    return result[0].toBigInt();
  }

  try_getLockedShares(
    index: BigInt,
    who: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLockedShares",
      "getLockedShares(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(index),
        ethereum.Value.fromAddress(who)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLockedToTotal(index: BigInt, who: Address): BigInt {
    let result = super.call(
      "getLockedToTotal",
      "getLockedToTotal(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(index),
        ethereum.Value.fromAddress(who)
      ]
    );

    return result[0].toBigInt();
  }

  try_getLockedToTotal(
    index: BigInt,
    who: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLockedToTotal",
      "getLockedToTotal(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(index),
        ethereum.Value.fromAddress(who)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRevenue(index: BigInt): Address {
    let result = super.call("getRevenue", "getRevenue(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toAddress();
  }

  try_getRevenue(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("getRevenue", "getRevenue(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getStatus(): boolean {
    let result = super.call("getStatus", "getStatus():(bool)", []);

    return result[0].toBoolean();
  }

  try_getStatus(): ethereum.CallResult<boolean> {
    let result = super.tryCall("getStatus", "getStatus():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  indexUsed(param0: BigInt): boolean {
    let result = super.call("indexUsed", "indexUsed(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try_indexUsed(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("indexUsed", "indexUsed(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  majority(): i32 {
    let result = super.call("majority", "majority():(uint16)", []);

    return result[0].toI32();
  }

  try_majority(): ethereum.CallResult<i32> {
    let result = super.tryCall("majority", "majority():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  sold(): boolean {
    let result = super.call("sold", "sold():(bool)", []);

    return result[0].toBoolean();
  }

  try_sold(): ethereum.CallResult<boolean> {
    let result = super.tryCall("sold", "sold():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  uri(param0: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_uri(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateRevenuePaymentCall extends ethereum.Call {
  get inputs(): CreateRevenuePaymentCall__Inputs {
    return new CreateRevenuePaymentCall__Inputs(this);
  }

  get outputs(): CreateRevenuePaymentCall__Outputs {
    return new CreateRevenuePaymentCall__Outputs(this);
  }
}

export class CreateRevenuePaymentCall__Inputs {
  _call: CreateRevenuePaymentCall;

  constructor(call: CreateRevenuePaymentCall) {
    this._call = call;
  }
}

export class CreateRevenuePaymentCall__Outputs {
  _call: CreateRevenuePaymentCall;

  constructor(call: CreateRevenuePaymentCall) {
    this._call = call;
  }

  get _clone(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DefraktionalizeCall extends ethereum.Call {
  get inputs(): DefraktionalizeCall__Inputs {
    return new DefraktionalizeCall__Inputs(this);
  }

  get outputs(): DefraktionalizeCall__Outputs {
    return new DefraktionalizeCall__Outputs(this);
  }
}

export class DefraktionalizeCall__Inputs {
  _call: DefraktionalizeCall;

  constructor(call: DefraktionalizeCall) {
    this._call = call;
  }
}

export class DefraktionalizeCall__Outputs {
  _call: DefraktionalizeCall;

  constructor(call: DefraktionalizeCall) {
    this._call = call;
  }
}

export class FraktionalizeCall extends ethereum.Call {
  get inputs(): FraktionalizeCall__Inputs {
    return new FraktionalizeCall__Inputs(this);
  }

  get outputs(): FraktionalizeCall__Outputs {
    return new FraktionalizeCall__Outputs(this);
  }
}

export class FraktionalizeCall__Inputs {
  _call: FraktionalizeCall;

  constructor(call: FraktionalizeCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class FraktionalizeCall__Outputs {
  _call: FraktionalizeCall;

  constructor(call: FraktionalizeCall) {
    this._call = call;
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get _creator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _revenueChannelImplementation(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get uri(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _majority(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class LockSharesTransferCall extends ethereum.Call {
  get inputs(): LockSharesTransferCall__Inputs {
    return new LockSharesTransferCall__Inputs(this);
  }

  get outputs(): LockSharesTransferCall__Outputs {
    return new LockSharesTransferCall__Outputs(this);
  }
}

export class LockSharesTransferCall__Inputs {
  _call: LockSharesTransferCall;

  constructor(call: LockSharesTransferCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get numShares(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class LockSharesTransferCall__Outputs {
  _call: LockSharesTransferCall;

  constructor(call: LockSharesTransferCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SellItemCall extends ethereum.Call {
  get inputs(): SellItemCall__Inputs {
    return new SellItemCall__Inputs(this);
  }

  get outputs(): SellItemCall__Outputs {
    return new SellItemCall__Outputs(this);
  }
}

export class SellItemCall__Inputs {
  _call: SellItemCall;

  constructor(call: SellItemCall) {
    this._call = call;
  }
}

export class SellItemCall__Outputs {
  _call: SellItemCall;

  constructor(call: SellItemCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetMajorityCall extends ethereum.Call {
  get inputs(): SetMajorityCall__Inputs {
    return new SetMajorityCall__Inputs(this);
  }

  get outputs(): SetMajorityCall__Outputs {
    return new SetMajorityCall__Outputs(this);
  }
}

export class SetMajorityCall__Inputs {
  _call: SetMajorityCall;

  constructor(call: SetMajorityCall) {
    this._call = call;
  }

  get newValue(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetMajorityCall__Outputs {
  _call: SetMajorityCall;

  constructor(call: SetMajorityCall) {
    this._call = call;
  }
}

export class SoldBurnCall extends ethereum.Call {
  get inputs(): SoldBurnCall__Inputs {
    return new SoldBurnCall__Inputs(this);
  }

  get outputs(): SoldBurnCall__Outputs {
    return new SoldBurnCall__Outputs(this);
  }
}

export class SoldBurnCall__Inputs {
  _call: SoldBurnCall;

  constructor(call: SoldBurnCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get bal(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SoldBurnCall__Outputs {
  _call: SoldBurnCall;

  constructor(call: SoldBurnCall) {
    this._call = call;
  }
}

export class UnlockSharesTransferCall extends ethereum.Call {
  get inputs(): UnlockSharesTransferCall__Inputs {
    return new UnlockSharesTransferCall__Inputs(this);
  }

  get outputs(): UnlockSharesTransferCall__Outputs {
    return new UnlockSharesTransferCall__Outputs(this);
  }
}

export class UnlockSharesTransferCall__Inputs {
  _call: UnlockSharesTransferCall;

  constructor(call: UnlockSharesTransferCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UnlockSharesTransferCall__Outputs {
  _call: UnlockSharesTransferCall;

  constructor(call: UnlockSharesTransferCall) {
    this._call = call;
  }
}
